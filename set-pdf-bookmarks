#!/usr/bin/python3
from os import path
from os import system
from PyPDF2 import PdfFileWriter, PdfFileReader
import tkinter as tk
from tkinter import filedialog

def import_list(fp):
    f = open(fp, 'r')
    l = f.read().split("\n")
    f.close()
    return l

def load_file(path=None):
    if path is None:
        tk.Tk().withdraw()
        path = filedialog.askopenfilename()
    return path

def save_file(path=None):
    if path is None:
        tk.Tk().withdraw()
        path = filedialog.asksaveasfilename(filetypes = (("PDF file", "*.pdf"), ("all files", "*.*")))
    return path

def bookmark(pdf, bookmarks, parent=None, append='', insert=False, offset=0):
    bms = []
    n = 1
    for b in bookmarks:
        if insert:
            title = append + str(n) + ' - ' + b[0]
        else:
            title = b[0]
        bms.append(pdf.addBookmark(title, b[1] + offset, parent))
        n += 1
    return bms

def check_level(line):
    if line[:4] == '    ':
        return 1 + check_level(line[4:])
    else:
        return 0

def set_parents(to_process, level=0, parent=None, counter=0, offset=0, line_counter=0):
    processed = []
    # print(processed)
    try:
        to_process.remove('')
    except:
        pass
    while len(to_process) > 0:
        line = to_process[0]
        line_counter += 1
        if line[0] == '~':
            offset = int(line[2:]) - 2
            line_counter -= 1
            to_process = to_process[1:]
        else:
            if check_level(line) == level:
                line = line[level * 4:]
                if line[0] == '*':
                    prefix = ''
                    counter = 0
                    line = line[2:]
                elif line[0] == '!':
                    prefix = line[1:].split('!')[0]
                    counter = 0
                    line = line[len(prefix) + 3:]
                else:
                    counter += 1
                    if parent is None or len(parent[0]) == 0:
                        prefix = str(counter)
                    else:
                        prefix = parent[0] + '.' + str(counter)
                page = int(line.split(' ')[-1])
                line = line[:-len(str(page)) - 1]
                page += offset
                p = (prefix, line, page, line_counter - 1, parent)
                # if not parent is None:
                #     print(str(line_counter - 1) + ' ' + str(p) + ' with parent: ' + str(parent[3]))
                # else:
                #     print(str(line_counter - 1) + ' ' + str(p))
                processed.append(p)
                to_process = to_process[1:]
            elif check_level(line) > level:
                to_process, newly_processed, num_lines, offset = set_parents(to_process, level=level+1, parent=processed[-1], counter=0, offset=offset, line_counter=line_counter - 1)
                processed = processed + newly_processed
                line_counter += (num_lines - line_counter - 1)
            else:
                return to_process, processed, line_counter, offset
    return to_process, processed, line_counter, offset

def assign_bookmarks(pdf, processed):
    bookmarks = []
    for i in range(len(processed)):
        p = processed[i]
        # print(bookmarks)
        # print(p)
        parent = p[4]
        if not parent is None:
            parent = bookmarks[parent[3]]
        prefix = p[0]
        if len(prefix) > 0:
            prefix += ' - '
        bookmarks.append(pdf.addBookmark(prefix + p[1], p[2], parent))
    return bookmarks

# s = 'test 1\n    test 2\n    test 3\n    test 4\n~100\ntest 5\ntest 6\ntest 3\n    test 2\n    test 2\n        test 3\n    test 2\n    test 1\n    * test 1\n!A! test 234\n    test 1234'

# pro = set_parents(s.split('\n'))

home = path.expanduser('~')
str_path = load_file(path.join(home, 'Documents', 'Configuration', 'Some-Pretty-Boring-Shell-Scripts', 'pdf-bookmarks'))
pre = import_list(str_path)
in_path = load_file(path.join(home, 'Library', pre[0]))
out_path = save_file(path.join(home, 'Desktop', pre[0]))
pre = pre[1:]
try:
    pre.remove('', 999)
except:
    pass
# out_path = in_path
in_pdf = PdfFileReader(open(in_path, 'rb'))
out_pdf = PdfFileWriter()
for page in range(in_pdf.getNumPages()):
    page = in_pdf.getPage(page)
    out_pdf.addPage(page)
x, processed, y, z = set_parents(pre, offset=-1)
# print(processed)
assign_bookmarks(out_pdf, processed)
with open(out_path, 'wb') as out:
    out_pdf.write(out)
system('cp "' + in_path + '" "' + out_path[:-4] + ' BACKUP.pdf"')
system('cp "' + out_path + '" "' + in_path + '"')
system('rm "' + out_path + '"')
